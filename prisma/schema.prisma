// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  role        Role
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  clients     Client[]       @relation("UserClients") // Sales أو Admin
  deals       Deal[]         @relation("UserDeals")
  tasks       Task[]         @relation("UserTasks")
  tickets     Ticket[]       @relation("UserTickets")
}

model Client {
  id          Int       @id @default(autoincrement())
  name        String
  company     String?
  phone       String?
  email       String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  salesOwner  User           @relation("UserClients", fields: [salesOwnerId], references: [id])
  salesOwnerId Int

  deals       Deal[]
  tickets     Ticket[]
  tasks       Task[]
}

model Deal {
  id          Int       @id @default(autoincrement())
  title       String
  amount      Float
  stage       DealStage
  expectedClose DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  client      Client         @relation(fields: [clientId], references: [id])
  clientId    Int

  owner       User           @relation("UserDeals", fields: [ownerId], references: [id])
  ownerId     Int
}

model Ticket {
  id          Int       @id @default(autoincrement())
  subject     String
  description String
  status      TicketStatus
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  client      Client         @relation(fields: [clientId], references: [id])
  clientId    Int

  assignedTo  User?          @relation("UserTickets", fields: [assignedToId], references: [id])
  assignedToId Int?
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus
  dueDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  client      Client?        @relation(fields: [clientId], references: [id])
  clientId    Int?

  owner       User           @relation("UserTasks", fields: [ownerId], references: [id])
  ownerId     Int
}

enum Role {
  ADMIN
  SALES
  SUPPORT
}

enum DealStage {
  POTENTIAL
  NEGOTIATION
  WON
  LOST
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
